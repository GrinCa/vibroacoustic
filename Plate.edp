//--------------------------------------------------------------------------
// Load libraries and mesh
//--------------------------------------------------------------------------

load "msh3" // for buildlayers function
load "gmsh" // for loading gmsh meshes


string root="Matrices/Plate/";
mesh3 Th = gmshload3("Plate.msh");


//--------------------------------------------------------------------------
// Define variables, functions, and macros
//--------------------------------------------------------------------------

real E = 2.38e7;
real rhoS = 1188;
real nu = 0.29;
real mu = E/(2*(1+nu));
real lambda = E*nu/((1+nu)*(1-2*nu));


real pressure = 1000;

real sqrt2=sqrt(2.);

macro Grad(p) [dx(p),dy(p),dz(p)] // EOM -- End Of Macro
macro epsilon(u1,u2,u3)  [dx(u1),dy(u2),dz(u3),(dz(u2)+dy(u3))/sqrt2,(dz(u1)+dx(u3))/sqrt2,(dy(u1)+dx(u2))/sqrt2] // EOM -- End Of Macro
macro div(u1,u2,u3) ( dx(u1)+dy(u2)+dz(u3) ) // EOM -- End Of Macro

//--------------------------------------------------------------------------
// Define finite element space, solid and fluid
//--------------------------------------------------------------------------

fespace VhS(Th,[P1,P1,P1,P1]);
VhS [u1,u2,u3,p], [v1,v2,v3,v];



//--------------------------------------------------------------------------
// Define varf
//--------------------------------------------------------------------------

//Solid
varf k([u1,u2,u3,p], [v1,v2,v3,v]) = int3d(Th, 5)( lambda*div(u1,u2,u3)*div(v1,v2,v3)+
	  	            		  	2.*mu*( epsilon(u1,u2,u3)'*epsilon(v1,v2,v3) ) ) 
					     + on(1,u1=0,u2=0,u3=0);
varf m([u1,u2,u3,p], [v1,v2,v3,v]) = int3d(Th, 5)( rhoS*[u1,u2,u3]'*[v1,v2,v3] );


//Fluid
varf h([u1,u2,u3,p], [v1,v2,v3,v]) = int3d(Th, 4)( Grad(p)'*Grad(v) );
varf q([u1,u2,u3,p], [v1,v2,v3,v]) = int3d(Th, 4)( p*v );

//Coupling
varf c([u1,u2,u3,p], [v1,v2,v3,v]) = int2d(Th, 2)( p*v1 );

//RHS
varf rhs([u1,u2,u3,p], [v1,v2,v3,v]) = int2d(Th, 3)( pressure*v1 );



//--------------------------------------------------------------------------
// Define matrices
//--------------------------------------------------------------------------

//Solid
matrix K = k(VhS, VhS);
matrix M = m(VhS, VhS);
//Fluid
matrix H = h(VhS,VhS);
matrix Q = q(VhS,VhS);
//Coupling
matrix C = c(VhS,VhS);
//RHS
real[int] RHSvector = rhs(0,VhS);
matrix RHS = RHSvector;



// nodes Export and coordinates
fespace VhNodes(Th,P1);
VhNodes[int] vhn(3);
vhn[0] = x;
vhn[1] = y;
vhn[2] = z;



{
  ofstream fout(root+"Nodes.txt");
  for (int n = 0; n < VhNodes.ndof; n++)
  {
    for (int d = 0; d < 3; d++)
      fout << "  " << vhn[d][][n]; // x, y, z
    fout << endl;
  }
}



{
ofstream fout(root+"M.txt");
fout<< M <<endl;
}
{
ofstream fout(root+"K.txt");
fout<< K <<endl;
}
{
ofstream fout(root+"H.txt");
fout<< H <<endl;
}
{
ofstream fout(root+"Q.txt");
fout<< Q <<endl;
}
{
ofstream fout(root+"C.txt");
fout<< C <<endl;
}
{
ofstream fout(root+"RHS.txt");
fout<< RHS <<endl;
}





